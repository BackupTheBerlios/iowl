__version__ = "$Revision: 1.1 $"

"""
$Log: cRulesGrabber.py,v $
Revision 1.1  2002/02/10 21:40:54  aharth
added showrules feature, cleaned up ui


"""

import pManager

class cRulesGrabber:
    """Responsible for displaying rules page"""

    def __init__(self, cGuiRequestHandler):
        """Constructor"""
        self.cGui = cGuiRequestHandler

    def GetHtml(self, dParams):
        """Return complete HTML-page

        return string
        - beginning with tag <html>
        - ending with tag </html>

        http headers etc are generated by proxy!

        """

        # Get Header
        sHeader = self.cGui.GetHeader('iOwl.net - Rules')

        # Get recording Status of proxy
        bState = pManager.manager.GetProxyInterface().GetStatus()

        # Get first part of page
        sPart1 = ''
        if bState == 0:
            # Owl not logging
            # Get inactive page
            sPart1 = self.cGui.GetInactivePage()
        else:
            # owl is logging
            # get active page
            sPart1 = self.cGui.GetActivePage()

        # get pStatisticsInterface
        psi = pManager.manager.GetStatisticsInterface()

        # get Rules
        lRules = psi.GetRules()
        
        sContent = '<h2>Association Rules</h2>\n'

        if len(lRules.lData) == 0:
            sContent = sContent + '<p class="message">Sorry, no rules available at this time.</p>'
        else:
            for rule in lRules.lData:
                sContent = sContent + "<p>\n"
                cons, ant, conf, supp = rule.GetRule()
                for a in ant:
                    sContent = sContent + str(a) + " "

                sContent = sContent + "-&gt; " + str(cons)
                
                #sContent = sContent + "Support: " + str(supp) + "Confidence: " + str(conf)
                sContent = sContent + "</p>\n"

        # get end part
        sPart2 = self.cGui.GetEndPage()

        # Glue it
        sPage = sHeader + sPart1 + sContent + sPart2

        # return page and content-type
        return sPage, 'text/html'











